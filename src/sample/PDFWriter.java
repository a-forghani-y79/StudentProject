package sample;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.FileOutputStream;
import java.util.Date;

public class PDFWriter {
    static DataCenter[] dataCenter = MainMenuController.students;
    static int ii = MainMenuController.i;

    static String FileAdr = "C:/Users/"+System.getProperty("user.name")+"/Desktop/";
    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.BOLD);
    private static Font suba4Font = new Font(Font.FontFamily.TIMES_ROMAN, 14,
            Font.BOLD);
    private static Font stdFont = new Font(Font.FontFamily.COURIER, 13);

    public static void main(String[] args) {

        int status = Integer.valueOf(args[0]);
        try {
            Document document = new Document();
            document.setPageSize(PageSize.A4);
            switch (status) {
                case 1:
                    PdfWriter.getInstance(document, new FileOutputStream(FileAdr+"listClassA.pdf"));
                    document.open();
                    addMetaData(document);
                    attendenceList(document, "First Class");
                    break;
                case 2:
                    PdfWriter.getInstance(document, new FileOutputStream(FileAdr+"listClassB.pdf"));
                    document.open();
                    addMetaData(document);
                    attendenceList(document, "Second Class");
                    break;
                case 3:
                    PdfWriter.getInstance(document, new FileOutputStream(FileAdr+"listClassC.pdf"));
                    document.open();
                    addMetaData(document);
                    attendenceList(document, "Third Class");
                    break;
                case 4:
                    PdfWriter.getInstance(document, new FileOutputStream(FileAdr+"listTop.pdf"));
                    document.open();
                    addMetaData(document);
                    byAvreg(document,20,Double.parseDouble(args[1]));
                    break;
                case 5:
                    PdfWriter.getInstance(document, new FileOutputStream(FileAdr+"listThird.pdf"));
                    document.open();
                    addMetaData(document);
                    byAvreg(document,Double.parseDouble(args[1]),Double.parseDouble(args[1]));
                    break;
                case 6:
                    PdfWriter.getInstance(document, new FileOutputStream(FileAdr+"listCond.pdf"));
                    document.open();
                    addMetaData(document);
                    byAvreg(document,13,0);
                    break;

            }
            document.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private static void addMetaData(Document document) {
        document.addTitle("My first PDF");
        document.addSubject("Using iText");
        document.addKeywords("Java, PDF, iText");
        document.addAuthor("Lars Vogel");
        document.addCreator("Lars Vogel");
    }

 /*   private static void addTitlePage(Document document)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("Title of the document", catFont));

        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(
                "Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                smallBold));
        addEmptyLine(preface, 3);
        preface.add(new Paragraph(
                "This document describes something which is very important ",
                smallBold));

        addEmptyLine(preface, 8);

        preface.add(new Paragraph(
                "This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
                redFont));

        document.add(preface);
        // Start a new page
        document.newPage();
    }
*/

    static void byAvreg(Document document, double avregA,double avregB) throws DocumentException {
        Paragraph paragraph = new Paragraph();
        Paragraph first = new Paragraph("List By Avreg: " + avregA+" To "+avregB, subFont);
        first.setAlignment(Element.ALIGN_CENTER);
        paragraph.add(first);
        Paragraph p = new Paragraph("name "+spaceGenerator(maxNameLength())+"ID:           Gender:        Grade1        Grade2        Grade3",suba4Font);
        paragraph.add(p);
        int number = 0;
        for (int i = 0; i < ii; i++) {
            double ave = dataCenter[i].getAvrege();
            if (ave>=avregB && ave<=avregA) {
                String name = dataCenter[i].getLastName()+" "+dataCenter[i].getFirstName()+spaceGenerator(maxNameLength() - dataCenter[i].getNameLengh());
                String id = dataCenter[i].getID()+spaceGenerator(2);
                String gender = dataCenter[i].getGender();
                double[] g=dataCenter[i].getGrades();
                number++;
                Paragraph paragraph1 = new Paragraph(name+" "+id+"  "+gender+"    "+g[0]+"        "+g[1]+"        "+g[2],stdFont);
                paragraph.add(paragraph1);

            }

        }
        Paragraph pr = new Paragraph("Numbers: "+number);
        pr.setAlignment(Element.ALIGN_RIGHT);
        paragraph.add(pr);

        document.add(paragraph);
        document.newPage();

    }

    static void attendenceList(Document document, String className) throws DocumentException {

        Paragraph paragraph = new Paragraph();
        Paragraph first = new Paragraph("Attendence List " + className, subFont);
        first.setAlignment(Element.ALIGN_CENTER);
        paragraph.add(first);
        for (int i = 0; i < ii; i++) {
            String str = dataCenter[i].getLastName() + " " + dataCenter[i].getFirstName() + spaceGenerator(maxNameLength() - dataCenter[i].getNameLengh());
            String brakets = bracket(maxNameLength());
            Paragraph p = new Paragraph(str + brakets, stdFont);
            paragraph.add(p);
        }
        document.add(paragraph);
        document.newPage();
    }

    static String bracket(int maxLenght) {
        int num = (67 - maxLenght) / 2;
        String result = "";
        for (int i = 0; i < num; i++)
            result += "[]";
        return result;
    }

    static int maxNameLength() {
        int max = 0;
        for (int j = 0; j < ii; j++)
            if (dataCenter[j].getNameLengh() > max)
                max = dataCenter[j].getNameLengh();
        return max;
    }

    static String spaceGenerator(int n) {
        String str = "";
        while (n > 0) {
            str += " ";
            n--;
        }
        return str;
    }

    static void test(Document document) throws DocumentException {
        String[] ss = {"1234567890123456789012345678901234567890123456789012345678901234567890", "mohammad [][][][][]", "alireza", "tohid", "mamad", "ghasem"};
        Paragraph paragraph = new Paragraph();
        for (int k = 0; k < ss.length; k++) {
            //  paragraph.add(new Paragraph(dataCenter[k].getLastName(),testFont));
            paragraph.add(new Paragraph(ss[k], stdFont));

        }
        document.setMargins(0, 0, 0, 0);
        document.add(paragraph);
        document.newPage();
    }


    private static void addContent(Document document, int a) throws DocumentException {
        Anchor anchor = new Anchor("First Chapter", catFont);
        anchor.setName("First Chapter");

        // Second parameter is the number of the chapter
        Chapter catPart = new Chapter(new Paragraph(anchor), 1);

        Paragraph subPara = new Paragraph("Subcategory 1", subFont);
        Section subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("Hello"));

        subPara = new Paragraph("Subcategory 2", subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("Paragraph 1"));
        subCatPart.add(new Paragraph("Paragraph 2"));
        subCatPart.add(new Paragraph("Paragraph 3"));

        // add a list
        createList(subCatPart);
        Paragraph paragraph = new Paragraph();
        addEmptyLine(paragraph, 5);
        subCatPart.add(paragraph);

        // add a table
        createTable(subCatPart);

        // now add all this to the document
        document.add(catPart);

        // Next section
        anchor = new Anchor("Second Chapter", catFont);
        anchor.setName("Second Chapter");

        // Second parameter is the number of the chapter
        catPart = new Chapter(new Paragraph(anchor), 1);

        subPara = new Paragraph("Subcategory", subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("Forghani Ali       [][][][][][][][][][][][][]" + a, stdFont));
        subCatPart.add(new Paragraph("Salehi Amir Ghader [][][][][][][][][][][][][]", stdFont));

        // now add all this to the document
        document.add(catPart);

    }


    private static void createTable(Section subCatPart) {
        String[] names = {"ali", "babak", "amir", "peyman"};/*, "mahdiar", "mohanna", "aysan", "ida", "yashar"};*/
        PdfPTable table = new PdfPTable(names.length);
        PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Table Header 2"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Table Header 3"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        table.setHeaderRows(1);
/*
        table.addCell("1.0");
        table.addCell("1.1");
        table.addCell("1.2");
        table.addCell("2.1");
        table.addCell("2.2");
        table.addCell("2.3");

        subCatPart.add(table);*/



      /*  for (int i = 0; i < names.length; i++) {

            table.addCell(names[i]);
        }*/
        subCatPart.add(table);
    }

    private static void createList(Section subCatPart) {
        List list = new List(true, true, 12);
        list.add(new ListItem("First point"));
        list.add(new ListItem("Second point"));
        list.add(new ListItem("Third point"));
        subCatPart.add(list);
    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }


}
